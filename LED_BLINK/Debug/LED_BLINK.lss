
LED_BLINK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000138  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e4  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f4  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  0000079b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	1a c0       	rjmp	.+52     	; 0x4e <__vector_12>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>
  26:	12 c0       	rjmp	.+36     	; 0x4c <__bad_interrupt>
  28:	11 c0       	rjmp	.+34     	; 0x4c <__bad_interrupt>
  2a:	10 c0       	rjmp	.+32     	; 0x4c <__bad_interrupt>
  2c:	0f c0       	rjmp	.+30     	; 0x4c <__bad_interrupt>
  2e:	0e c0       	rjmp	.+28     	; 0x4c <__bad_interrupt>
  30:	0d c0       	rjmp	.+26     	; 0x4c <__bad_interrupt>
  32:	0c c0       	rjmp	.+24     	; 0x4c <__bad_interrupt>
  34:	0b c0       	rjmp	.+22     	; 0x4c <__bad_interrupt>
  36:	0a c0       	rjmp	.+20     	; 0x4c <__bad_interrupt>
  38:	09 c0       	rjmp	.+18     	; 0x4c <__bad_interrupt>
  3a:	08 c0       	rjmp	.+16     	; 0x4c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61
  48:	80 d0       	rcall	.+256    	; 0x14a <main>
  4a:	8c c0       	rjmp	.+280    	; 0x164 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <__vector_12>:
void initialisePWMtimer(void);



ISR(ANA_COMP0_vect)
{
  4e:	1f 92       	push	r1
  50:	0f 92       	push	r0
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	0f 92       	push	r0
  56:	11 24       	eor	r1, r1
  58:	2f 93       	push	r18
  5a:	8f 93       	push	r24
  5c:	9f 93       	push	r25
	//disable interrupts
	ACSR0A &= ~(1<<ACIE0);
  5e:	53 98       	cbi	0x0a, 3	; 10
	//turn LED(0) on & all others off & reset
	PORTB ^= (1<<PORTB0);
  60:	98 b3       	in	r25, 0x18	; 24
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	98 27       	eor	r25, r24
  66:	98 bb       	out	0x18, r25	; 24
	PORTB ^= (1<<PORTB1);
  68:	28 b3       	in	r18, 0x18	; 24
  6a:	92 e0       	ldi	r25, 0x02	; 2
  6c:	92 27       	eor	r25, r18
  6e:	98 bb       	out	0x18, r25	; 24
	//toggle between rising and falling
	ACSR0A ^= (1<<ACIS00);
  70:	9a b1       	in	r25, 0x0a	; 10
  72:	89 27       	eor	r24, r25
  74:	8a b9       	out	0x0a, r24	; 10
	//enable interrupts once service done
	ACSR0A |= (1<<ACIE0);
  76:	53 9a       	sbi	0x0a, 3	; 10
}
  78:	9f 91       	pop	r25
  7a:	8f 91       	pop	r24
  7c:	2f 91       	pop	r18
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <initialiseAnalogComparator>:
}

void initialiseAnalogComparator(void){

	// clear control and status register A
	 ACSR0A &= ~(ACSR0A);
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	9a b1       	in	r25, 0x0a	; 10
  8c:	80 95       	com	r24
  8e:	89 23       	and	r24, r25
  90:	8a b9       	out	0x0a, r24	; 10

	// clear control and status register B
	 ACSR0B &= ~(ACSR0B);
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	9b b1       	in	r25, 0x0b	; 11
  96:	80 95       	com	r24
  98:	89 23       	and	r24, r25
  9a:	8b b9       	out	0x0b, r24	; 11

	//Set hysteresis level of 50mV
	ACSR0B |= (1<<HSEL0) | (1<<HLEV0);
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	80 6c       	ori	r24, 0xC0	; 192
  a0:	8b b9       	out	0x0b, r24	; 11

	//enable output comparator
	ACSR0B |= (1<<ACOE0);
  a2:	5c 9a       	sbi	0x0b, 4	; 11

	//set rising edge
	ACSR0A |= (1<<ACIS01) | (1<<ACIS00);
  a4:	8a b1       	in	r24, 0x0a	; 10
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	8a b9       	out	0x0a, r24	; 10
	
	//initialise interrupt enable
	ACSR0A |= (1<<ACIE0);
  aa:	53 9a       	sbi	0x0a, 3	; 10
  ac:	08 95       	ret

000000ae <initialisePWMtimer>:
}

void initialisePWMtimer(void){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	unsigned int timerCount = (2^16) - count;
	double dutyCycle = 0.5;
	unsigned int compareCount;
	
	//clear control register A (Timer 2)
	TCCR2A &= ~(TCCR2A);
  b2:	aa ec       	ldi	r26, 0xCA	; 202
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	8c 91       	ld	r24, X
  b8:	9c 91       	ld	r25, X
  ba:	80 95       	com	r24
  bc:	89 23       	and	r24, r25
  be:	8c 93       	st	X, r24

	//clear control register B (Timer 2)
	TCCR2B &= ~(TCCR2B);
  c0:	e9 ec       	ldi	r30, 0xC9	; 201
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	90 81       	ld	r25, Z
  c8:	80 95       	com	r24
  ca:	89 23       	and	r24, r25
  cc:	80 83       	st	Z, r24

	//clear timer output compare marker register A1
	TOCPMSA1 &= ~(TOCPMSA1);
  ce:	48 e6       	ldi	r20, 0x68	; 104
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	ea 01       	movw	r28, r20
  d4:	88 81       	ld	r24, Y
  d6:	98 81       	ld	r25, Y
  d8:	80 95       	com	r24
  da:	89 23       	and	r24, r25
  dc:	88 83       	st	Y, r24

	//clear timer output compare marker register A0
	TOCPMSA0 &= ~(TOCPMSA0);
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	ec 01       	movw	r28, r24
  e4:	28 81       	ld	r18, Y
  e6:	38 81       	ld	r19, Y
  e8:	20 95       	com	r18
  ea:	23 23       	and	r18, r19
  ec:	28 83       	st	Y, r18

	//Compare Output Mode, Fast PWM (toggle on output compare match)
	TCCR2A |= (1<<COM2A0);
  ee:	8c 91       	ld	r24, X
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	8c 93       	st	X, r24

	//10-bit Fast PWM, Waveform Generator Mode
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
  f4:	8c 91       	ld	r24, X
  f6:	83 60       	ori	r24, 0x03	; 3
  f8:	8c 93       	st	X, r24
	TCCR2B |= (1<<WGM22);
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24

	//set clock speed (16MHz)
	TCCR2B |= (1<<CS20);
 100:	80 81       	ld	r24, Z
 102:	81 60       	ori	r24, 0x01	; 1
 104:	80 83       	st	Z, r24

	//set output to TOCC1
	TOCPMSA1 |= (1<<TOCC1S1);
 106:	fa 01       	movw	r30, r20
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24
	//TOCPMSA0 |= (1<<TOCC3S1);  

	//clearing register
	TOCPMCOE &= ~(TOCPMCOE);
 10e:	e6 e6       	ldi	r30, 0x66	; 102
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	90 81       	ld	r25, Z
 116:	80 95       	com	r24
 118:	89 23       	and	r24, r25
 11a:	80 83       	st	Z, r24

	//set channel 1 as output/enable
	TOCPMCOE |= (1<<TOCC1OE);
 11c:	80 81       	ld	r24, Z
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	80 83       	st	Z, r24
	
	//initialising max count(overflow)
	TCNT2H = (timerCount>>8);
 122:	8e ef       	ldi	r24, 0xFE	; 254
 124:	80 93 c7 00 	sts	0x00C7, r24
	TCNT2L = timerCount;
 128:	83 e8       	ldi	r24, 0x83	; 131
 12a:	80 93 c6 00 	sts	0x00C6, r24

	compareCount = timerCount + (count*dutyCycle);
	
	//initialise output compare registers
	OCR2AH = (compareCount>>8);
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	80 93 c5 00 	sts	0x00C5, r24
	OCR2AL = compareCount;
 134:	8a e4       	ldi	r24, 0x4A	; 74
 136:	80 93 c4 00 	sts	0x00C4, r24
	TIMSK2 &= ~(TIMSK2);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	91 b3       	in	r25, 0x11	; 17
 13e:	80 95       	com	r24
 140:	89 23       	and	r24, r25
 142:	81 bb       	out	0x11, r24	; 17

	//set output compare A and B interrupt enable
	//TIMSK2 |= (1<<OCIE2B); 
	

 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <main>:
}

int main(void)
{
	// PIN B0 B1 is output 2x LED's
	DDRB |= (1<<DDB0);
 14a:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1<<DDB1);
 14c:	b9 9a       	sbi	0x17, 1	; 23

	DDRA |= (1<<PORTA2);
 14e:	d2 9a       	sbi	0x1a, 2	; 26

	//initialize Analog Comparator
	initialiseAnalogComparator();
 150:	9b df       	rcall	.-202    	; 0x88 <initialiseAnalogComparator>
	//initialise PWM timer
	initialisePWMtimer();
 152:	ad df       	rcall	.-166    	; 0xae <initialisePWMtimer>

	//clear port B
	PORTB &= ~(PORTB);
 154:	98 b3       	in	r25, 0x18	; 24
 156:	88 b3       	in	r24, 0x18	; 24
 158:	90 95       	com	r25
 15a:	89 23       	and	r24, r25
 15c:	88 bb       	out	0x18, r24	; 24

	//turn LED on initially for polling 
	PORTB |= (1<<PORTB0);
 15e:	c0 9a       	sbi	0x18, 0	; 24

	//enable global interrupts
	sei();
 160:	78 94       	sei

	while (1) {	
	}
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x18>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
